version: "1.1"
name: List members
config:
  http:
    baseURL: ${{ env.host }}

# NOTE: `.` is not this file's path, it's the directory from which `stepci` is ran.
before:
  name: "Before all (not a test)"
  steps:
    - $ref: "init.yaml#/components/steps/init_server"
    - $ref: "init.yaml#/components/steps/create_first_admin"
    - $ref: "init.yaml#/components/steps/log_admin_in"
    - $ref: "#/components/steps/add_member"
    - $ref: "invitations.yaml#/components/steps/log_last_invited_member_in"
    - name: Set nickname
      http:
        method: PUT
        url: /v1/members/${{ captures.lastInvitationJid }}/nickname
        json:
          nickname: ${{ internet.userName | fake }}
        auth:
          bearer:
            token: ${{ captures.lastInvitedMemberToken }}
        check:
          status: 200
        captures:
          jid1:
            jsonpath: $.jid
          nickname1:
            jsonpath: $.nickname
    - name: Set avatar
      http:
        method: PUT
        url: /v1/members/${{ captures.lastInvitationJid }}/avatar
        json:
          image: ${{ env.exampleAvatar }}
        auth:
          bearer:
            token: ${{ captures.lastInvitedMemberToken }}
        check:
          status: 200
    - $ref: "#/components/steps/add_member"
    - $ref: "invitations.yaml#/components/steps/log_last_invited_member_in"
    - name: Set nickname
      http:
        method: PUT
        url: /v1/members/${{ captures.lastInvitationJid }}/nickname
        json:
          nickname: ${{ internet.userName | fake }}
        auth:
          bearer:
            token: ${{ captures.lastInvitedMemberToken }}
        check:
          status: 200
        captures:
          jid2:
            jsonpath: $.jid
          nickname2:
            jsonpath: $.nickname
    - $ref: "#/components/steps/add_member"
    - $ref: "#/components/steps/add_member"

tests:
  listMembersDefault:
    name: Default
    steps:
      - name: List members
        http:
          method: GET
          url: /v1/members
          auth:
            bearer:
              token: ${{ captures.token }}
          check:
            status: 200
            headers:
              $ref: "#/components/headers/paginated_json"
            schema:
              type: array
              items:
                $ref: openapi.json#/components/schemas/Member
            jsonpath:
              # 4 created members + main admin account
              $.length: 5
  listMembersPage2:
    name: Page 2
    steps:
      - name: List members
        http:
          method: GET
          url: /v1/members
          params:
            page_number: 2
            page_size: 2
          auth:
            bearer:
              token: ${{ captures.token }}
          check:
            status: 206
            headers:
              $ref: "#/components/headers/paginated_json"
            schema:
              type: array
              items:
                $ref: openapi.json#/components/schemas/Member
            jsonpath:
              $.length: 2
  enrichMembersStream:
    name: Enrich members list (stream)
    steps:
      - name: List members
        http:
          method: GET
          url: /v1/members
          params:
            page_number: 1
            page_size: 4
          auth:
            bearer:
              token: ${{ captures.token }}
          check:
            status: 206
          captures:
            jid3:
              # NOTE: `$[0]` is the first admin, `$[1]` and `$[2]` are respectively `captures.jid1` and  `captures.jid2`
              jsonpath: $[3].jid
      - name: Enrich members (list as individual "jids" query params) (stream)
        sse:
          # TODO: If [stepci/stepci#228](https://github.com/stepci/stepci/discussions/228) is accepted,
          #   and after it's resolved, remove `${{ env.host }}` and use the global config instead.
          url: ${{ env.host }}/v1/enrich-members?jids=${{ captures.jid1 }}&jids=${{ captures.jid2 }}&jids=${{ captures.jid3 }}
          timeout: 2000
          headers:
            Accept: text/event-stream
          auth:
            bearer:
              token: ${{ captures.token }}
          check:
            $ref: "#/tests/enrichMembersStream/check"
      - name: Enrich members (list as individual "jids[]" query params) (stream)
        sse:
          # TODO: If [stepci/stepci#228](https://github.com/stepci/stepci/discussions/228) is accepted,
          #   and after it's resolved, remove `${{ env.host }}` and use the global config instead.
          url: ${{ env.host }}/v1/enrich-members?jids[]=${{ captures.jid1 }}&jids[]=${{ captures.jid2 }}&jids[]=${{ captures.jid3 }}
          timeout: 2000
          headers:
            Accept: text/event-stream
          auth:
            bearer:
              token: ${{ captures.token }}
          check:
            $ref: "#/tests/enrichMembersStream/check"
    # NOTE: `check` was put here so it could be reused in two places using `$ref` (which does not support array traversal)
    check:
      messages:
        - id: ${{ captures.jid1 }}
          type: enriched-member
          jsonpath:
            $.nickname: ${{ captures.nickname1 }}
            $.avatar: ${{ env.exampleAvatar }}
        - id: ${{ captures.jid2 }}
          type: enriched-member
          jsonpath:
            $.nickname: ${{ captures.nickname2 }}
            $.avatar: null
        - id: ${{ captures.jid3 }}
          type: enriched-member
          jsonpath:
            # NOTE: Since we haven't set a nickname, `nickname` should be the local part of the JID here.
            #   There's no easy way to process `captures.jid3` this way in Step CI so let's just not check for it.
            # $.nickname: ???
            $.avatar: null
  enrichMembers:
    name: Enrich members list
    steps:
      - name: List members
        http:
          method: GET
          url: /v1/members
          params:
            page_number: 1
            page_size: 4
          auth:
            bearer:
              token: ${{ captures.token }}
          check:
            status: 206
          captures:
            jid3:
              # NOTE: `$[0]` is the first admin, `$[1]` and `$[2]` are respectively `captures.jid1` and  `captures.jid2`
              jsonpath: $[3].jid
      - name: Enrich members (list as individual "jids" query params)
        http:
          method: GET
          url: /v1/enrich-members
          timeout: 2000
          params: "jids=${{ captures.jid1 }}&jids=${{ captures.jid2 }}&jids=${{ captures.jid3 }}"
          auth:
            bearer:
              token: ${{ captures.token }}
          check:
            $ref: "#/tests/enrichMembers/check"
      - name: Enrich members (list as individual "jids[]" query params)
        http:
          method: GET
          url: /v1/enrich-members?jids[]=${{ captures.jid1 }}&jids[]=${{ captures.jid2 }}&jids[]=${{ captures.jid3 }}
          timeout: 2000
          auth:
            bearer:
              token: ${{ captures.token }}
          check:
            $ref: "#/tests/enrichMembers/check"
    # NOTE: `check` was put here so it could be reused in two places using `$ref` (which does not support array traversal)
    check:
      status: 200
      headers:
        Content-Type: application/json
      # jsonpath:
      # FIXME: If [stepci/liquidless#10](https://github.com/stepci/liquidless/issues/10) is accepted,
      #   and after it's resolved, uncomment the checks below.
      #   Until then, we'll rely in checks made when testing the SSE stream equivalent.
      # $.['${{ captures.jid1 }}'].nickname: ${{ captures.nickname1 }}
      # $.['${{ captures.jid1 }}'].avatar: ${{ env.exampleAvatar }}
      # $.['${{ captures.jid2 }}'].nickname: ${{ captures.nickname2 }}
      # $.['${{ captures.jid2 }}'].avatar: null
      # # NOTE: Since we haven't set a nickname, `nickname` should be the local part of the JID here.
      # #   There's no easy way to process `captures.jid3` this way in Step CI so let's just not check for it.
      # # $.['${{ captures.jid3 }}'].nickname: ???
      # $.['${{ captures.jid3 }}'].avatar: null

components:
  steps:
    add_member:
      # NOTE: We used a config flag to auto-accept invitations,
      #   because otherwise we'd have no way to accept them.
      $ref: "invitations.yaml#/components/steps/invite_member"
  headers:
    paginated_json:
      Content-Type: application/json
      Pagination-Current-Page: /\d+/
      Pagination-Page-Size: /\d+/
      Pagination-Page-Count: /\d+/
      Pagination-Item-Count: /\d+/

env:
  host: http://127.0.0.1:8000
  mainAdminUsername: ${{ internet.userName | fake }}
  mainAdminPassword: ${{ internet.password | fake }}
  hostname: ${{ internet.domainName | fake }}
  exampleAvatar: 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
