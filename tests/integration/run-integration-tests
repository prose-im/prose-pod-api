#!/usr/bin/env bash

# TODO: Count error and warning logs. Exit with 1 if at least one error encountered. Exit with 0 if a warning was encountered, and add a flag to consider it an error.

# Configure the script to exit when a command fails.
set -e

: ${SCRIPTS_ROOT:="${REPOSITORY_ROOT:?}"/scripts}
export SCRIPTS_ROOT
source "${SCRIPTS_ROOT:?}"/util.sh

# ===== CONSTANTS =====

: ${SELF:="$(basename $0)"}

source "${SCRIPTS_ROOT:?}"/constants.sh
: ${PROSE_POD_API_IMAGE_TAG:="${LOCAL_DOCKER_TAG:?}"}
export PROSE_POD_API_IMAGE_TAG
source "${SCRIPTS_ROOT:?}"/image-names.sh

INTEGRATION_TESTS_DIR="${REPOSITORY_ROOT:?}"/tests/integration
LOCAL_RUN_DIR="${REPOSITORY_ROOT:?}"/local-run
STEPCI_DIR="${INTEGRATION_TESTS_DIR:?}"/step-ci
: ${INTEGRATION_TEST_HOST:=http://127.0.0.1:8080}
export ENV_FILE="${INTEGRATION_TESTS_DIR:?}"/test.env
DNS_ZONES_DIR="${INTEGRATION_TESTS_DIR:?}"/dns-zones
export DNS_ZONE_FILE="${DNS_ZONES_DIR:?}"/working-static.zone
# NOTE: We don't want things like [stepci/stepci#239](https://github.com/stepci/stepci/issues/239)
#   to break the tests or the analytics server to slow down the tests execution.
export STEPCI_DISABLE_ANALYTICS=true
export SCENARIOS_DIR="${INTEGRATION_TESTS_DIR:?}"/scenarios
export SCENARIO_CONSTANTS_FILE="${SCENARIOS_DIR:?}"/constants.sh
SCENARIO_NAME=default
: ${COMPOSE_PROFILES:=test}
export COMPOSE_PROFILES

# ===== ARGUMENT PARSING =====

ARGS_=()
SKIPPED=()
for arg in "$@"; do
	case $arg in
		--api=*)
			export PROSE_POD_API_IMAGE_TAG="${arg#'--api='}"
			;;
		--server=*)
			export PROSE_POD_SERVER_IMAGE_TAG="${arg#'--server='}"
			;;
		+telemetry) COMPOSE_PROFILES+="${COMPOSE_PROFILES:+,}"telemetry ;;
		--help) die 'Unsupported' ;;
		--dry-run) export DRY_RUN=1 ;;
		--debug) export LOG_DEBUG=1 ;;
		--trace) export LOG_TRACE=1 ;;
		-*) SKIPPED+=("${arg#'-'}") ;;
		*) ARGS_+=("$arg") ;;
	esac
done
# Update command args so we can then list test names.
set -- "${ARGS_[@]}"
unset ARGS_

# ===== MAIN LOGIC =====

start() {
	if (( ${SKIP_POD_START:-0} )); then
		trace "Not starting the Prose Pod ($(format_code "SKIP_POD_START=${SKIP_POD_START:?}"))."
	else
		trace 'Starting the Prose Pod…'
		task local:run -- --detach --api=local --scenario="${SCENARIO_NAME:?}" --ephemeral
		for _ in $(seq 1 5); do
			trace 'Waiting a second…'
			sleep 1
			local error="$(edo xh :8080/v1/version -q)" && return 0 || :
		done
		error 'API still unreachable after 5s:'
		error "${error-}"
		abort
	fi
}

stop() {
	if (( ${SKIP_POD_STOP:-0} )); then
		trace "Not stopping the Prose Pod ($(format_code "SKIP_POD_STOP=${SKIP_POD_STOP:?}"))."
	else
		trace 'Stopping the Prose Pod…'
		task local:stop
	fi
}

source "${INTEGRATION_TESTS_DIR:?}"/util.sh

stepci_run() {
	local test_file=${1:?}
	local config_options=${2-test}

	info "$(fg-blue "$(for _ in $(seq 72); do printf "="; done)")"
	info "$(fg-blue "Running test '$(sed "s#${STEPCI_DIR:?}/##" <<< "${test_file}")' with config '${config_options}'…")"
	info "$(fg-blue "$(for _ in $(seq 72); do printf "="; done)")"

	export PROSE_CONFIG_FILE="${INTEGRATION_TESTS_DIR:?}/prose-${config_options:?}.toml"
	[ -f "${PROSE_CONFIG_FILE:?}" ] || die "File $(format_url "${PROSE_CONFIG_FILE:?}") doesn't exist."
	# NOTE: We have to `cd $STEPCI_DIR` because transitive `$ref`s are not processed correctly otherwise.
	start && \
	{ (cd "${STEPCI_DIR:?}" && edo stepci run "${test_file#"${STEPCI_DIR:?}/"}" --env host="${INTEGRATION_TEST_HOST:?}") \
	&& { stop || die 'Could not stop properly.'; } || abort; }
}

if [ "$#" -eq 0 ]; then
	info "No test file provided. Will use all $(format_code '*.yaml') files in $(format_url "${STEPCI_DIR:?}")."
	# WARN: Spaces in `*.yaml` files will break.
	set -- $(cd "${STEPCI_DIR:?}"; find . -type f -name '*.yaml' ! -name 'env.yaml' | sed -E "s/\.\/(.+)\.yaml$/\1/")
	# Add factory reset test.
	set -- "$@" factory-reset
fi

info "Will run tests on $(format_url ${INTEGRATION_TEST_HOST:?})."

# NOTE: Some tests need a different `PROSE_CONFIG_FILE` or `DNS_ZONE_FILE`. Special cases are handled here.
for arg in "$@"; do
	if in_array SKIPPED "$arg"; then
		warn "Skipping test $(format_code "$arg") (marked to skip)."
		continue
	fi

	if [ "$arg" == factory-reset ]; then
		# NOTE: Unset `PROSE_CONFIG_FILE` so it’s not overwritten by the factory
		#   reset.
		unset PROSE_CONFIG_FILE
		"${INTEGRATION_TESTS_DIR:?}"/test-factory-reset
		continue
	fi

	test_file="${STEPCI_DIR:?}/${arg:?}.yaml"

	if ! [ -e "$test_file" ]; then
		error "$(format_url "$test_file") not found, skipping."
		continue
	fi

	case $arg in
		*dns-configured-correctly-dynamic)
			DNS_ZONE_FILE="${DNS_ZONES_DIR:?}"/working-dynamic.zone stepci_run "$test_file" ;;
		*dns-configured-correctly-static)
			DNS_ZONE_FILE="${DNS_ZONES_DIR:?}"/working-static.zone stepci_run "$test_file" 'static-address' ;;
		auth-expired)
			stepci_run "$test_file" 'tokens-expired' ;;
		init)
			SCENARIO_NAME=fresh BASE_SCENARIOS_DIR="${LOCAL_RUN_DIR:?}"/scenarios stepci_run "$test_file" ;;
		*)
			stepci_run "$test_file" ;;
	esac
done
