# See <https://taskfile.dev/usage> and <https://taskfile.dev/reference/schema>
# to find all keys and their usage.
version: "3"

silent: true
dotenv: [paths.env]
env:
  SELF: task {{ .ALIAS | default .TASK }} --
  SCRIPTS_ROOT: "{{.ROOT_DIR}}/scripts"
  REPOSITORY_ROOT: "{{.ROOT_DIR}}"
  PROSE_POD_API_DIR: "{{.ROOT_DIR}}"

tasks:
  lint:
    desc: Lint the whole project (Rust code, OpenAPI description…)
    deps: [rust:lint, openapi:lint]

  rust:lint:
    desc: Lints all Rust files.
    internal: true
    cmd: cargo fmt --check

  format:
    desc: Formats all files.
    deps: [rust:format]

  rust:format:
    desc: Formats all Rust files.
    internal: true
    cmd: cargo fmt

  update:
    desc: Updates all dependencies.
    deps: [rust:update-deps, openapi:update-redoc]

  rust:update-deps:
    desc: Updates Rust dependencies.
    internal: true
    cmds:
      - echo '[INFO] Updating Rust dependencies…'
      - rustup upgrade
      # NOTE: `cargo update` updates all workspace member crates
      - cargo update

  rust:outdated:
    desc: Checks for outdated dependencies.
    cmd: |
      if cargo install --list | grep -q '^cargo-edit v'; then
        echo '[INFO] Checking for outdated dependencies…';
        cargo upgrade --dry-run --incompatible --pinned --verbose;
      else
        echo '[WARN] Install `cargo upgrade` with `cargo install cargo-edit` for this script to check for outdated dependencies';
      fi

  build-image:
    desc: Builds the Prose Pod API Docker image. Run `task {{.TASK}} -- --help` for more info.
    cmd: "{{.ROOT_DIR}}/scripts/build-image {{.CLI_ARGS}}"

  test:
    desc: Runs all tests then updates "Tested at Rust version" in the `README`.
    cmds:
      - task: unit-test
      - task: smoke-test
      - task: local:build
      - task: integration-test
      - task: util:update-tested-at-version

  unit-test:
    desc: Runs unit tests.
    cmds:
      - cargo test -p prose-pod-api --lib --examples
      - cargo test -p prose-pod-api --doc
      - cargo test --workspace --exclude prose-pod-api

  smoke-test:
    desc: Runs smoke tests.
    cmd: cargo test --test behavior -F test -- {{.CLI_ARGS}}

  integration-test:
    desc: Runs integration tests.
    cmd: "{{.ROOT_DIR}}/tests/integration/run-integration-tests {{.CLI_ARGS}}"

  integration-test:logs:
    desc: Prints logs from last integration test run.
    cmd: task local:logs -- {{.CLI_ARGS}}

  release:
    desc: Creates a release (bumps the version number, then adds and pushes a tag).
    dotenv: [.env]
    cmd: "{{.ROOT_DIR}}/scripts/release {{.CLI_ARGS}}"

  changelog:prepare:
    desc: Prepares changelog entries for the next release.
    cmd: "{{.ROOT_DIR}}/scripts/changelog-prepare {{.CLI_ARGS}}"

  local:run:
    desc: Runs a Prose Pod API.
    cmd: "{{.ROOT_DIR}}/local-run/scripts/run {{.CLI_ARGS}}"

  local:stop:
    desc: Stops a running Prose Pod API (useful when launched using `--detach`).
    cmd: "{{.ROOT_DIR}}/local-run/scripts/stop {{.CLI_ARGS}}"

  local:logs:
    desc: Prints logs from a local run.
    cmd: "{{.ROOT_DIR}}/local-run/scripts/logs {{.CLI_ARGS}}"

  local:scenarios:create:
    desc: Creates a new environment with persistent storage so you can save API states between runs.
    cmd: "{{.ROOT_DIR}}/local-run/scripts/scenario-create {{.CLI_ARGS}}"

  local:scenarios:list:
    desc: Lists available scenarios.
    cmd: "{{.ROOT_DIR}}/local-run/scripts/scenarios-list {{.CLI_ARGS}}"

  local:scenarios:reset:
    desc: >
      Reset the persistent storage of a run scenario.
      Note: If the scenario was derived from another, this will **not** use the state of the original one.
      If that's what you want, you will need to delete and re-create the scenario.
    prompt: This command will delete all the local Prose data associated to this scenario, do you want to continue?
    cmd: "{{.ROOT_DIR}}/local-run/scripts/scenarios-reset {{.CLI_ARGS}}"

  local:scenarios:delete:
    desc: Deletes a scenario.
    prompt: This command will delete your local Prose data for this scenario (not the ones derived from it), do you want to continue?
    cmd: "{{.ROOT_DIR}}/local-run/scripts/scenarios-delete {{.CLI_ARGS}}"

  local:update:
    desc: Updates the Prose Pod API repository to get the latest updates.
    cmd: "{{.ROOT_DIR}}/local-run/scripts/update {{.CLI_ARGS}}"

  local:build:
    desc: Builds the Prose Pod API and the repositories it depends on without updating the code.
    cmd: "{{.ROOT_DIR}}/local-run/scripts/build-images {{.CLI_ARGS}}"

  local:reset:
    desc: Starts fresh with a Prose Pod API that has no data.
    prompt: This command will delete all the local Prose data associated to the default scenario, do you want to continue?
    cmd: "{{.ROOT_DIR}}/local-run/scripts/scenarios-reset default {{.CLI_ARGS}}"

  telemetry:start:
    desc: Start one or more collector(s) for telemetry logs collection.
    cmd: "{{.ROOT_DIR}}/local-run/scripts/otlp start {{.CLI_ARGS}}"

  telemetry:stop:
    desc: Stop one or more collector(s) for telemetry logs collection.
    cmd: "{{.ROOT_DIR}}/local-run/scripts/otlp stop {{.CLI_ARGS}}"

  openapi:lint:
    desc: Lint the OpenAPI specification file.
    cmd: "{{.ROOT_DIR}}/docs/openapi/openapi-lint {{.CLI_ARGS}}"

  openapi:preview-docs:
    desc: Preview the OpenAPI specification file in a graphical interface.
    cmd: "{{.ROOT_DIR}}/docs/openapi/openapi-preview-docs {{.CLI_ARGS}}"

  openapi:update-redoc:
    desc: Updates Redoc.
    vars:
      SRC: https://cdn.redoc.ly/redoc/latest/bundles/redoc.standalone.js
      DEST: src/rest-api/static/api-docs/redoc.standalone.js
    cmd: wget -q '{{.SRC}}' -O '{{.DEST}}'

  util:update-tested-at-version:
    desc: Updates "Tested at Rust version" in the `README`.
    internal: true
    vars:
      RUST_VERSION:
        sh: rustc --version
      PATTERN: 's/(Tested at Rust version: `).+(`)/\1{{.RUST_VERSION}}\2/'
      README: README.md
    cmds:
      - cmd: "sed -i -E '{{.PATTERN}}' '{{.README}}'"
        platforms: [linux]
      - cmd: "sed -i '' -E '{{.PATTERN}}' '{{.README}}'"
        platforms: [darwin]

  dev:make-test-scenarios:
    desc: Create scenarios for integration testing.
    cmd: "{{.ROOT_DIR}}/tests/integration/make-test-scenarios"

  dev:make-license:testing:
    desc: Generate a Testing license.
    dotenv: [.env]
    cmd: >
      LICENSE="$(xh POST "${PROSE_CLOUD_API_URL:?}/v1/licenses/testing"
      user_limit:={{.USER_LIMIT}}
      secret="${PROSE_CLOUD_API_SECRET_TESTING:?}"
      {{ if .DOMAIN }}domain="{{ .DOMAIN }}"{{ end }}
      | base64)";
      {{ if eq .COPY "true" }}
      printf "${LICENSE:?}" | pbcopy;
      echo "Copied to your clipboard! (Use `COPY=false` to log the base64 string instead)";
      {{ else }}
      echo "${LICENSE:?}";
      {{ end }}
    vars:
      COPY: "{{ .COPY | default true }}"
      # NOTE: At the moment, the default in Prose Cloud API is `prose.local`.
      DOMAIN: '{{ .DOMAIN | default "test.local" }}'
    requires:
      vars: [USER_LIMIT]
